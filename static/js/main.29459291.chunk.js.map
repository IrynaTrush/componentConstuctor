{"version":3,"sources":["redux/reducers/root.reducer.js","redux/actions/actionTypes.js","redux/store.js","redux/selectors/root.selector.js","redux/actions/root.action.js","components/CreatedComponent/index.js","components/CreatedComponent/CreatedComponent.js","components/AddComponent/index.js","components/AddComponent/AddComponent.js","components/CompConfig/index.js","components/CompConfig/CompConfig.js","components/InputPreview/index.js","components/InputPreview/InputPreview.js","components/CheckRadioPreview/index.js","components/CheckRadioPreview/CheckRadioPreview.js","components/RangeComponent/index.js","components/RangeComponent/RangeComponent.js","components/CompReview/index.js","components/CompReview/CompReview.js","components/Layout/index.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["initialState","types","currentOptions","createdComponent","deleteComponent","arr","id","newArr","splice","rootReducer","state","action","type","value","data","store","createStore","selectType","selectOptions","selectComponents","createComponent","CreatedComponent","props","className","defaultValue","message","readOnly","onClick","title","AddComponent","inputTypes","useSelector","dispatch","useDispatch","useState","selectItem","setSelectItem","setMessage","minValue","setMinValue","maxValue","setMaxValue","optionValue","setOptionValue","options","onChange","e","target","map","item","index","key","placeholder","length","option","CompConfig","currentComponent","style","textAlign","Math","random","InputPreview","marginTop","CheckRadioPreview","marginRight","RangeComponent","max","min","marinLeft","CompReview","generateInputPreview","generateCheckoxPreiew","text","password","radio","checkbox","range","generateInput","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.29459291.chunk.js","sourcesContent":["import { ADD_OPTION, CREATE_COMPONENT, CLEAR_OPTION, DELETE_COMPONENT } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    types: [\r\n        'text',\r\n        'password',\r\n        'radio',\r\n        'checkbox',\r\n        'range'\r\n    ],\r\n    currentOptions: [],\r\n    createdComponent: [],\r\n};\r\n\r\nconst deleteComponent = (arr, id) => {\r\n    let newArr = [...arr];\r\n    newArr.splice(id, 1);\r\n    return newArr\r\n}\r\n    \r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_OPTION: {\r\n            return {\r\n                ...state,\r\n                currentOptions: [...state.currentOptions, action.value]\r\n            };\r\n        }\r\n        case CLEAR_OPTION: {\r\n            return {\r\n                ...state,\r\n                currentOptions: []\r\n            };\r\n        }\r\n        case CREATE_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                createdComponent: [...state.createdComponent, action.data]\r\n            };\r\n        }\r\n        case DELETE_COMPONENT: {\r\n            return {\r\n                ...state,\r\n              createdComponent: deleteComponent(state.createdComponent, action.id),\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport default rootReducer;","export const ADD_OPTION = 'ADD_OPTION';\r\nexport const CLEAR_OPTION = 'CLEAR_OPTION';\r\nexport const CREATE_COMPONENT = 'CREATE_COMPONENT';\r\nexport const DELETE_COMPONENT = 'DELETE_COMPONENT';\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers/root.reducer';\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;","const selectType = state => state.types;\r\nconst selectOptions = state => state.currentOptions;\r\nconst selectComponents = state => state.createdComponent;\r\n\r\nexport { selectType,selectOptions,selectComponents };","import { ADD_OPTION, CREATE_COMPONENT,\r\n     CLEAR_OPTION, DELETE_COMPONENT } from './actionTypes';\r\n\r\nexport const addOptions = (value) => {\r\n    return {\r\n        type: ADD_OPTION,\r\n        value,\r\n    }\r\n}\r\n\r\nexport const createComponent = (data) => {\r\n    return {\r\n        type: CREATE_COMPONENT,\r\n        data,\r\n    }\r\n}\r\n\r\nexport const clearOptions = () => {\r\n    return {\r\n        type: CLEAR_OPTION\r\n    }\r\n}\r\n\r\nexport const deleteComponent = (id) => {\r\n    return {\r\n        type: DELETE_COMPONENT,\r\n        id,\r\n    }\r\n}","import CreatedComponent from \"./CreatedComponent\";\r\n\r\nexport default CreatedComponent;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst CreatedComponent = (props) => {\r\n   return (\r\n     <div >\r\n         <select className=\"component__select\">\r\n             <option defaultValue>{props.type}</option>\r\n         </select>\r\n         <input value={props.message} className=\"component__input\" readOnly/>\r\n         <button type=\"button\" \r\n            className=\"component__btn\" \r\n            onClick={props.onClick} \r\n            title=\"delete component\">-\r\n          </button>\r\n     </div>\r\n   );\r\n}\r\n\r\nexport default CreatedComponent;","import AddComponent from './AddComponent';\r\n\r\nexport default AddComponent;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectType, selectOptions } from '../../redux/selectors/root.selector';\r\nimport { addOptions, createComponent, clearOptions } from '../../redux/actions/root.action';\r\nimport './style.css';\r\n\r\nconst AddComponent = () => {\r\n    const inputTypes = useSelector(selectType);\r\n    const currentOptions = useSelector(selectOptions);\r\n    const dispatch = useDispatch();\r\n    const [selectItem, setSelectItem] = useState('text');\r\n    const [message, setMessage] = useState('')\r\n    const [minValue, setMinValue] = useState('');\r\n    const [maxValue, setMaxValue] = useState('');\r\n    const [optionValue, setOptionValue] = useState('');\r\n    const data = {\r\n        type: selectItem,\r\n        message,\r\n        options: currentOptions,\r\n        minValue,\r\n        maxValue, \r\n    }\r\n    \r\n    const reset = () => {\r\n        setSelectItem('text');\r\n        setMessage('')\r\n    }\r\n    \r\n    const handleSelect = (e) => {\r\n        setSelectItem(e.target.value);\r\n    }\r\n\r\n    const handleAddOption = (e) => {\r\n        const option = {\r\n            value: optionValue,\r\n            id: currentOptions.length + 1\r\n        }\r\n       if(optionValue) {\r\n        dispatch(addOptions(option));\r\n        setOptionValue('');\r\n       }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if( message ) {\r\n            if((selectItem === 'radio' || selectItem === 'checkbox') && currentOptions.length !== 0) {\r\n                dispatch(createComponent(data))\r\n            } else if (selectItem === 'range' && maxValue  && minValue ) {\r\n                dispatch(createComponent(data))\r\n            } else if( selectItem === 'text' || selectItem === 'password') {\r\n                dispatch(createComponent(data))\r\n            }\r\n        }\r\n        reset();\r\n        dispatch(clearOptions())\r\n    }\r\n    return (\r\n        <form className=\"form\">\r\n            <div>\r\n                <p className=\"form__title\">\r\n                    Choose the type of your input:\r\n                </p>\r\n                <select \r\n                    onChange={handleSelect} \r\n                    className=\"form__select\" \r\n                    value={selectItem}\r\n                >\r\n                    {\r\n                        inputTypes.map((item, index) => (\r\n                            <option value={item} key={index}>\r\n                                {item}</option>\r\n                            ))\r\n                    }\r\n                </select>\r\n            </div>\r\n            <input type=\"text\" \r\n                placeholder=\"Message\" \r\n                value={message} \r\n                className=\"form__input\" \r\n                onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            {\r\n                ((selectItem === 'radio' || selectItem === 'checkbox') &&\r\n                <>\r\n                    <div className=\"options\">\r\n                        {\r\n                            currentOptions && currentOptions.map((item, index) => (\r\n                                <div key={index}>\r\n                                    <p className=\"options__item\">{item.value}</p>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {\r\n                        currentOptions.length < 4 &&\r\n                        <div>\r\n                            <input placeholder=\"Option\"  \r\n                                className=\"option__input\"\r\n                                type=\"text\" \r\n                                value={optionValue} \r\n                                onChange={(e) => {setOptionValue(e.target.value)}}\r\n                            />\r\n                            <button type=\"button\"onClick={handleAddOption} \r\n                            className=\"option__btn\">+</button>\r\n                        </div>\r\n                    }\r\n                    </>) ||\r\n                    ( selectItem === 'range' && <>\r\n                        <input type=\"text\" \r\n                            placeholder=\"Enter a min value\" \r\n                            onChange={(e) => {setMinValue(e.target.value)}}\r\n                            className=\"range__value\"/>\r\n                        <input type=\"text\" \r\n                            placeholder=\"Enter a max value\" \r\n                            onChange={(e) => {setMaxValue(e.target.value)}}\r\n                            className=\"range__value\"/>\r\n                       </>\r\n                    )\r\n                }\r\n            <button type=\"button\" className=\"form__btn\" onClick={handleSubmit}>\r\n                 Add Component\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddComponent;","import CompConfig from './CompConfig';\r\n\r\nexport default CompConfig;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectComponents } from '../../redux/selectors/root.selector';\r\nimport { deleteComponent } from '../../redux/actions/root.action';\r\nimport CreatedComponent from '../CreatedComponent';\r\nimport AddComponent from '../AddComponent';\r\nimport './style.css';\r\n\r\n\r\nconst CompConfig = () => {\r\n    const currentComponent = useSelector(selectComponents);\r\n    const dispatch = useDispatch();\r\n    \r\n    const deleteComp = (id) => {\r\n        dispatch(deleteComponent(id))\r\n    }\r\n    return (\r\n        <>\r\n            <h1 style={{textAlign: 'center'}}>\r\n                Components Config\r\n            </h1>\r\n            <div className=\"components\">\r\n                {currentComponent && currentComponent.map((item, index) => (\r\n                    <div className=\"component__wrap\" key={Math.random()} >\r\n                        <CreatedComponent\r\n                            type={item.type}\r\n                            message={item.message}\r\n                            onClick={() => deleteComp(index)}\r\n                        />\r\n                        {\r\n                            ((item.type === 'checkbox' || item.type === 'radio') &&\r\n                            <div className=\"options__wrapper\" >{item.options.map(item => (\r\n                            <p className=\"option__value\" key={Math.random()}>{item.value}</p>))\r\n                        }\r\n                    </div>\r\n                        ) ||\r\n                        (item.type === 'range' && <div className=\"options__wrapper\">\r\n                            <p className=\"option__value\">{item.minValue}</p>\r\n                            <p className=\"option__value\">{item.maxValue}</p>\r\n                           \r\n                        </div>)\r\n                    }\r\n                    </div>\r\n                ))\r\n                }\r\n            </div>\r\n            <AddComponent />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CompConfig;","import InputPreview from './InputPreview';\r\n\r\nexport default InputPreview;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst InputPreview = (props) => {\r\n    return (\r\n        <div style={{marginTop: '20px'}}>\r\n            <label>\r\n                {props.message}\r\n                <input type={props.type} className=\"preview__input\" />\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputPreview;","import CheckRadioPreview from './CheckRadioPreview';\r\n\r\n export default CheckRadioPreview;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst CheckRadioPreview = (props) => {\r\n    return (\r\n        <div style={{marginTop: '20px'}}>\r\n            <p className=\"checkbox__title\">\r\n                {props.message}\r\n            </p>\r\n            {\r\n                props.options && props.options.map((item, index) => (\r\n                    <div key={index}>\r\n                      <label style={{marginRight: '5px'}}>\r\n                          {item.value}\r\n                          <input type={props.type} />\r\n                      </label>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckRadioPreview;","import RangeComponent from './RangeComponent';\r\n\r\nexport default RangeComponent;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst RangeComponent = (props) => {\r\n    return(\r\n        <div style={{marginTop: '20px'}}>\r\n            <label className=\"label__range\">\r\n                {props.message}\r\n                <input type={props.type}\r\n                max={props.maxValue}\r\n                min={props.minValue} \r\n                style={{marinLeft: '5px'}}/>\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RangeComponent;","import CompReview from './CompReview';\r\n\r\nexport default CompReview;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport InputPreview from '../InputPreview';\r\nimport CheckRadioPreview from '../CheckRadioPreview';\r\nimport RangeComponent from '../RangeComponent';\r\nimport { selectComponents } from '../../redux/selectors/root.selector';\r\n\r\nconst CompReview = () => {\r\n  const currentComponent = useSelector(selectComponents);\r\n \r\n  const generateInput = (item) => {\r\n    const generateInputPreview = () =>{\r\n     return ( <InputPreview \r\n      type={item.type}\r\n      message={item.message}\r\n   />)\r\n    }\r\n    const generateCheckoxPreiew = () => {\r\n      return (<CheckRadioPreview \r\n        \r\n          type={item.type}\r\n          message={item.message}\r\n          options={item.options}\r\n       />)\r\n    }\r\n    const generateRangePreview = () => {\r\n      return (<RangeComponent \r\n        type={item.type} \r\n        max={item.maxValue}\r\n        min={item.minValue} \r\n        message={item.message} \r\n        \r\n />)\r\n    }\r\n    const types = {text: generateInputPreview,\r\n    password: generateInputPreview,\r\n    radio: generateCheckoxPreiew,\r\n    checkbox: generateCheckoxPreiew,\r\n    range: generateRangePreview,\r\n    }\r\n    return types[item.type]()\r\n  }\r\n  return(\r\n        <div>\r\n            <h1 style={{textAlign: \"center\"}}>Component Preview</h1>\r\n            <div style={{textAlign: 'center'}}>\r\n               {\r\n                   currentComponent && currentComponent.map((item, index) => generateInput(item))\r\n               }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompReview;","import Layout from './Layout';\r\n\r\nexport default Layout;","import React from 'react';\r\nimport CompConfig from '../CompConfig';\r\nimport CompReview from '../CompReview';\r\nimport './style.css';\r\n\r\nconst Layout = () => {\r\n    return(\r\n        <div className=\"wrapperApp\">\r\n            <div className=\"configWrap\"> \r\n                <CompConfig />\r\n            </div>\r\n            <div className=\"reviewWrap\">\r\n                <CompReview />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;","import React from 'react';\nimport Layout from './components/Layout';\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}